{"ast":null,"code":"var _jsxFileName = \"/Users/ivysun/Library/Mobile Documents/com~apple~CloudDocs/Hunter/Spring 2025/CS 39548 Practical Web Development /Projects/final-project-client/src/components/containers/AllStudentsContainer.js\";\n/*==================================================\nAllStudentsContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"./Header\";\nimport { fetchAllStudentsThunk, deleteStudentThunk } from \"../../store/thunks\";\nimport AllStudentsView from \"../views/AllStudentsView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AllStudentsContainer extends Component {\n  // Get all students data from back-end database\n  componentDidMount() {\n    this.props.fetchAllStudents();\n  }\n\n  // Render All Students view by passing all students data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AllStudentsView, {\n        students: this.props.allStudents,\n        deleteStudent: this.props.deleteStudent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\nconst mapState = state => {\n  return {\n    allStudents: state.allStudents // Get the State object from Reducer \"allStudents\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => ({\n  fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n  deleteStudent: id => dispatch(deleteStudentThunk(id))\n});\n\n// Export store-connected container by default\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));","map":{"version":3,"names":["React","Component","connect","Header","fetchAllStudentsThunk","deleteStudentThunk","AllStudentsView","jsxDEV","_jsxDEV","AllStudentsContainer","componentDidMount","props","fetchAllStudents","render","children","fileName","_jsxFileName","lineNumber","columnNumber","students","allStudents","deleteStudent","mapState","state","mapDispatch","dispatch","id","withRouter"],"sources":["/Users/ivysun/Library/Mobile Documents/com~apple~CloudDocs/Hunter/Spring 2025/CS 39548 Practical Web Development /Projects/final-project-client/src/components/containers/AllStudentsContainer.js"],"sourcesContent":["/*==================================================\nAllStudentsContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"./Header\";\nimport {\n  fetchAllStudentsThunk,\n  deleteStudentThunk\n} from \"../../store/thunks\";\nimport AllStudentsView from \"../views/AllStudentsView\";\n\n\nclass AllStudentsContainer extends Component {\n  // Get all students data from back-end database\n  componentDidMount() {\n    this.props.fetchAllStudents();\n  }\n\n  // Render All Students view by passing all students data as props to the corresponding View component\n  render(){\n    return(\n      <div>\n        <Header />\n        <AllStudentsView \n          students={this.props.allStudents}\n          deleteStudent={this.props.deleteStudent}   \n        />\n      </div>\n    )\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\nconst mapState = (state) => {\n  return {\n    allStudents: state.allStudents,  // Get the State object from Reducer \"allStudents\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => ({\n  fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\n  deleteStudent: (id) => dispatch(deleteStudentThunk(id)),\n});\n\n\n// Export store-connected container by default\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,OAAOC,MAAM,MAAM,UAAU;AAC7B,SACEC,qBAAqB,EACrBC,kBAAkB,QACb,oBAAoB;AAC3B,OAAOC,eAAe,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGvD,MAAMC,oBAAoB,SAASR,SAAS,CAAC;EAC3C;EACAS,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACC,KAAK,CAACC,gBAAgB,CAAC,CAAC;EAC/B;;EAEA;EACAC,MAAMA,CAAA,EAAE;IACN,oBACEL,OAAA;MAAAM,QAAA,gBACEN,OAAA,CAACL,MAAM;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVV,OAAA,CAACF,eAAe;QACda,QAAQ,EAAE,IAAI,CAACR,KAAK,CAACS,WAAY;QACjCC,aAAa,EAAE,IAAI,CAACV,KAAK,CAACU;MAAc;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV;AACF;;AAEA;AACA;AACA;AACA,MAAMI,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAAG;EACnC,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMI,WAAW,GAAIC,QAAQ,KAAM;EACjCb,gBAAgB,EAAEA,CAAA,KAAMa,QAAQ,CAACrB,qBAAqB,CAAC,CAAC,CAAC;EACzDiB,aAAa,EAAGK,EAAE,IAAKD,QAAQ,CAACpB,kBAAkB,CAACqB,EAAE,CAAC;AACxD,CAAC,CAAC;;AAGF;AACA;AACA;AACA,eAAeC,UAAU,CAACzB,OAAO,CAACoB,QAAQ,EAAEE,WAAW,CAAC,CAACf,oBAAoB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}