{"ast":null,"code":"var _jsxFileName = \"/Users/ivysun/Library/Mobile Documents/com~apple~CloudDocs/Hunter/Spring 2025/CS 39548 Practical Web Development /Projects/final-project-client/src/components/containers/NewStudentContainer.js\";\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { fetchAllCampusesThunk, addStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    // Capture input data when it is entered\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    // Take action after user click the submit button\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n      console.log('ðŸ”” Submit clicked, form state:', this.state);\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: parseFloat(this.state.gpa) || 0,\n        campusId: this.state.campusId\n      };\n\n      // Add new student in back-end database\n      let newStudent = await this.props.addStudent(student);\n\n      // Update state, and trigger redirect to show the new student\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        imageUrl: \"\",\n        gpa: \"\",\n        campusId: null,\n        redirect: true,\n        redirectId: newStudent.id\n      });\n    };\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      imageUrl: \"\",\n      gpa: \"\",\n      campusId: \"\",\n      redirect: false,\n      redirectId: null\n    };\n  }\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: this.state.gpa,\n        campusId: this.state.campusId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","fetchAllCampusesThunk","addStudentThunk","jsxDEV","_jsxDEV","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","console","log","state","student","firstname","lastname","email","imageUrl","gpa","parseFloat","campusId","newStudent","addStudent","redirect","redirectId","id","componentWillUnmount","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","mapDispatch","dispatch"],"sources":["/Users/ivysun/Library/Mobile Documents/com~apple~CloudDocs/Hunter/Spring 2025/CS 39548 Practical Web Development /Projects/final-project-client/src/components/containers/NewStudentContainer.js"],"sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewStudentView from '../views/NewStudentView';\nimport { fetchAllCampusesThunk, addStudentThunk } from '../../store/thunks';\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\", \n      email: \"\",\n      imageUrl: \"\",\n      gpa: \"\",\n      campusId: \"\", \n      redirect: false, \n      redirectId: null\n    };\n  }\n  \n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n    console.log('ðŸ”” Submit clicked, form state:', this.state);\n\n    let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: parseFloat(this.state.gpa)||0,\n        campusId: this.state.campusId\n    };\n    \n    // Add new student in back-end database\n    let newStudent = await this.props.addStudent(student);\n\n    // Update state, and trigger redirect to show the new student\n    this.setState({\n      firstname: \"\", \n      lastname: \"\", \n      email: \"\",\n      imageUrl: \"\",\n      gpa: \"\", \n      campusId: null, \n      redirect: true, \n      redirectId: newStudent.id\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewStudentView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit} \n          firstname={this.state.firstname}\n          lastname={this.state.lastname}\n          email={this.state.email}\n          imageUrl={this.state.imageUrl}\n          gpa={this.state.gpa}\n          campusId={this.state.campusId}     \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        addStudent: (student) => dispatch(addStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}