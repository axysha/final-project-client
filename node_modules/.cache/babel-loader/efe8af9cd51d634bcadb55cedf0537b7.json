{"ast":null,"code":"var _jsxFileName = \"/Users/ivysun/Library/Mobile Documents/com~apple~CloudDocs/Hunter/Spring 2025/CS 39548 Practical Web Development /Projects/final-project-client/src/components/containers/NewStudentContainer.js\";\n/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { fetchAllCampusesThunk, addStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    // Capture input data when it is entered\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    // Take action after user click the submit button\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n      console.log('ðŸ”” Submit clicked, form state:', this.state);\n      const safeImage = this.state.imageUrl.trim() || '/student.png';\n      const student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        imageUrl: safeImage,\n        gpa: parseFloat(this.state.gpa) || 0,\n        campusId: this.state.campusId || null\n      };\n\n      // Add new student in back-end database\n      let newStudent;\n      try {\n        // Dispatch the thunk to add the new student\n        newStudent = await this.props.addStudent(student);\n      } catch (err) {\n        console.error('Failed to add student', err);\n        return;\n      }\n\n      // Update state, and trigger redirect to show the new student\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        imageUrl: \"\",\n        gpa: \"\",\n        campusId: \"\",\n        redirect: true,\n        redirectId: newStudent.id\n      });\n    };\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      imageUrl: \"\",\n      gpa: \"\",\n      campusId: \"\",\n      redirect: false,\n      redirectId: null\n    };\n  }\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  }\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        campuses: this.props.campuses,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: this.state.gpa,\n        campusId: this.state.campusId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapState = state => ({\n  campuses: state.allCampuses\n});\nconst mapDispatch = dispatch => ({\n  fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n  addStudent: student => dispatch(addStudentThunk(student))\n});\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","fetchAllCampusesThunk","addStudentThunk","jsxDEV","_jsxDEV","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","console","log","state","safeImage","imageUrl","trim","student","firstname","lastname","email","gpa","parseFloat","campusId","newStudent","addStudent","err","error","redirect","redirectId","id","componentDidMount","fetchAllCampuses","componentWillUnmount","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","campuses","mapState","allCampuses","mapDispatch","dispatch"],"sources":["/Users/ivysun/Library/Mobile Documents/com~apple~CloudDocs/Hunter/Spring 2025/CS 39548 Practical Web Development /Projects/final-project-client/src/components/containers/NewStudentContainer.js"],"sourcesContent":["/*==================================================\nNewStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewStudentView from '../views/NewStudentView';\nimport { fetchAllCampusesThunk, addStudentThunk } from '../../store/thunks';\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\", \n      email: \"\",\n      imageUrl: \"\",\n      gpa: \"\",\n      campusId: \"\", \n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchAllCampuses();\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n    console.log('ðŸ”” Submit clicked, form state:', this.state);\n    const safeImage = this.state.imageUrl.trim() || '/student.png';\n\n    const student = {\n      firstname: this.state.firstname,\n      lastname: this.state.lastname,\n      email: this.state.email,\n      imageUrl: safeImage,\n      gpa: parseFloat(this.state.gpa) || 0,\n      campusId: this.state.campusId || null\n    };\n\n    // Add new student in back-end database\n    let newStudent;\n    try {\n      // Dispatch the thunk to add the new student\n      newStudent = await this.props.addStudent(student);\n    } catch (err) {\n      console.error('Failed to add student', err);\n      return;\n    }\n\n    // Update state, and trigger redirect to show the new student\n    this.setState({\n      firstname: \"\", \n      lastname: \"\", \n      email: \"\",\n      imageUrl: \"\",\n      gpa: \"\", \n      campusId: \"\", \n      redirect: true, \n      redirectId: newStudent.id\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewStudentView \n          campuses = {this.props.campuses}\n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit} \n          firstname={this.state.firstname}\n          lastname={this.state.lastname}\n          email={this.state.email}\n          imageUrl={this.state.imageUrl}\n          gpa={this.state.gpa}\n          campusId={this.state.campusId}     \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapState = state => ({\n  campuses: state.allCampuses   \n});\n\nconst mapDispatch = dispatch => ({\n  fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\n  addStudent: student => dispatch(addStudentThunk(student))\n});\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(NewStudentContainer);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}