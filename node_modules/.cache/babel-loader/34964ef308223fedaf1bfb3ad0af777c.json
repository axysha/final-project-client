{"ast":null,"code":"var _jsxFileName = \"/Users/ivysun/Library/Mobile Documents/com~apple~CloudDocs/Hunter/Spring 2025/CS 39548 Practical Web Development /Projects/final-project-client/src/components/containers/CampusContainer.js\";\n/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk, deleteCampusThunk, editCampusThunk } from \"../../store/thunks\";\nimport { CampusView } from \"../views\";\n//import { editCampus } from '../../store/actions/actionCreators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CampusView, {\n        campus: this.props.campus,\n        deleteCampus: this.props.deleteCampus,\n        editCampus: this.props.editCampus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = state => {\n  return {\n    campus: state.campus // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteCampus: id => dispatch(deleteCampusThunk(id)),\n    editCampus: (id, updatedCampus) => dispatch(editCampusThunk(id, updatedCampus))\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchCampusThunk","deleteCampusThunk","editCampusThunk","CampusView","jsxDEV","_jsxDEV","CampusContainer","componentDidMount","props","fetchCampus","match","params","id","render","children","fileName","_jsxFileName","lineNumber","columnNumber","campus","deleteCampus","editCampus","mapState","state","mapDispatch","dispatch","updatedCampus"],"sources":["/Users/ivysun/Library/Mobile Documents/com~apple~CloudDocs/Hunter/Spring 2025/CS 39548 Practical Web Development /Projects/final-project-client/src/components/containers/CampusContainer.js"],"sourcesContent":["/*==================================================\nCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchCampusThunk , deleteCampusThunk, editCampusThunk } from \"../../store/thunks\";\n\nimport { CampusView } from \"../views\";\n//import { editCampus } from '../../store/actions/actionCreators';\n\nclass CampusContainer extends Component {\n  // Get the specific campus data from back-end database\n  componentDidMount() {\n    // Get campus ID from URL (API link)\n    this.props.fetchCampus(this.props.match.params.id);\n  }\n\n  // Render a Campus view by passing campus data as props to the corresponding View component\n  render() {\n    return (\n      <div>\n        <Header />\n        <CampusView \n        campus={this.props.campus}\n        deleteCampus={this.props.deleteCampus}\n        editCampus={this.props.editCampus} />\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\nconst mapState = (state) => {\n  return {\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n    deleteCampus: (id) => dispatch(deleteCampusThunk(id)),\n    editCampus: (id,updatedCampus) => dispatch(editCampusThunk(id,updatedCampus)),\n  };\n};\n\n// Export store-connected container by default\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(CampusContainer);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,gBAAgB,EAAGC,iBAAiB,EAAEC,eAAe,QAAQ,oBAAoB;AAE1F,SAASC,UAAU,QAAQ,UAAU;AACrC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,eAAe,SAASR,SAAS,CAAC;EACtC;EACAS,iBAAiBA,CAAA,EAAG;IAClB;IACA,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,IAAI,CAACD,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,EAAE,CAAC;EACpD;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACP,oBACER,OAAA;MAAAS,QAAA,gBACET,OAAA,CAACT,MAAM;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVb,OAAA,CAACF,UAAU;QACXgB,MAAM,EAAE,IAAI,CAACX,KAAK,CAACW,MAAO;QAC1BC,YAAY,EAAE,IAAI,CAACZ,KAAK,CAACY,YAAa;QACtCC,UAAU,EAAE,IAAI,CAACb,KAAK,CAACa;MAAW;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAEV;AACF;;AAEA;AACA;AACA;AACA,MAAMI,QAAQ,GAAIC,KAAK,IAAK;EAC1B,OAAO;IACLJ,MAAM,EAAEI,KAAK,CAACJ,MAAM,CAAG;EACzB,CAAC;AACH,CAAC;AACD;AACA;AACA,MAAMK,WAAW,GAAIC,QAAQ,IAAK;EAChC,OAAO;IACLhB,WAAW,EAAGG,EAAE,IAAKa,QAAQ,CAACzB,gBAAgB,CAACY,EAAE,CAAC,CAAC;IACnDQ,YAAY,EAAGR,EAAE,IAAKa,QAAQ,CAACxB,iBAAiB,CAACW,EAAE,CAAC,CAAC;IACrDS,UAAU,EAAEA,CAACT,EAAE,EAACc,aAAa,KAAKD,QAAQ,CAACvB,eAAe,CAACU,EAAE,EAACc,aAAa,CAAC;EAC9E,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA,eAAe3B,OAAO,CAACuB,QAAQ,EAAEE,WAAW,CAAC,CAAClB,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}