{"ast":null,"code":"/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators'; // Import Action Creators (\"ac\" keyword Action Creator)\nconst axios = require('axios');\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`);\n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n//Add Campus\n// THUNK CREATOR:\nexport const addCampusThunk = campus => async dispatch => {\n  try {\n    // API \"post\" call to add the \"campus\" object's data to the database\n    let res = await axios.post(`/api/campuses`, campus);\n    // Call Action Creator to return Action object (type + payload with new campus data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addCampus(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(\"Error adding campus: \", err);\n  }\n};\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);\n    dispatch(ac.fetchCampus(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n//Delete Campus\n//ThUNK CREATOR\nexport const deleteCampusThunk = id => async dispatch => {\n  try {\n    // API \"delete\" call to delete campus\n    await axios.delete(`/api/campuses/${id}`);\n    dispatch(fetchAllCampusesTh()); // Refresh the campus list after deletion\n  } catch (err) {\n    console.error(\"Error deleting campus:\", err);\n  }\n};\n\n//Edit Campus\n//THUNK CEATOR\nexport const editCampusThunk = (id, updatedCampus) => async dispatch => {\n  try {\n    const res = await axios.put(`/api/campuses/${id}`, updatedCampus);\n    dispatch(ac.editCampus(res.data));\n  } catch (err) {\n    console.error(\"Error editing campus: \", err);\n  }\n};\n\n// All Students\n// THUNK CREATOR:\nexport const fetchAllStudentsThunk = () => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`);\n    // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllStudents(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/students`, student);\n    // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {\n  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);\n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {\n  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student);\n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\nexport const fetchStudentThunk = id => async dispatch => {\n  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`);\n    // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n    dispatch(ac.fetchStudent(res.data));\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"names":["ac","axios","require","fetchAllCampusesThunk","dispatch","res","get","fetchAllCampuses","data","err","console","error","addCampusThunk","campus","post","addCampus","fetchCampusThunk","id","fetchCampus","deleteCampusThunk","delete","fetchAllCampusesTh","editCampusThunk","updatedCampus","put","editCampus","fetchAllStudentsThunk","fetchAllStudents","addStudentThunk","student","addStudent","deleteStudentThunk","studentId","deleteStudent","editStudentThunk","updatedStudent","editStudent","fetchStudentThunk","fetchStudent"],"sources":["/Users/ivysun/Library/Mobile Documents/com~apple~CloudDocs/Hunter/Spring 2025/CS 39548 Practical Web Development /Projects/final-project-client/src/store/thunks.js"],"sourcesContent":["/*==================================================\n/src/store/thunks.js\n\nIt contains all Thunk Creators and Thunks.\n================================================== */\nimport * as ac from './actions/actionCreators';  // Import Action Creators (\"ac\" keyword Action Creator)\nconst axios = require('axios');\n\n//All Campuses\n// THUNK CREATOR:\nexport const fetchAllCampusesThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"campuses\" data from database\n    let res = await axios.get(`/api/campuses`);  \n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllCampuses(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n//Add Campus\n// THUNK CREATOR:\nexport const addCampusThunk = (campus) => async (dispatch) => {\n  try{\n    // API \"post\" call to add the \"campus\" object's data to the database\n    let res = await axios.post(`/api/campuses`, campus); \n    // Call Action Creator to return Action object (type + payload with new campus data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addCampus(res.data));\n    return res.data;\n  } catch(err){\n    console.error(\"Error adding campus: \",err);\n  }\n}\n\n// Single Campus\n// THUNK CREATOR:\nexport const fetchCampusThunk = (id) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get a student data (based on \"id\")from database\n    let res = await axios.get(`/api/campuses/${id}`);  \n    dispatch(ac.fetchCampus(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n//Delete Campus\n//ThUNK CREATOR\nexport const deleteCampusThunk = (id) => async (dispatch) => {\n  try{\n    // API \"delete\" call to delete campus\n    await axios.delete(`/api/campuses/${id}`);\n    dispatch(fetchAllCampusesTh());  // Refresh the campus list after deletion\n  }\n  catch(err){\n    console.error(\"Error deleting campus:\", err);\n  }\n};\n\n//Edit Campus\n//THUNK CEATOR\nexport const editCampusThunk = (id,updatedCampus) => async dispatch => {\n  try{\n    const res = await axios.put(`/api/campuses/${id}`,updatedCampus);\n    dispatch(ac.editCampus(res.data)); \n  } catch(err){\n    console.error(\"Error editing campus: \",err);\n  }\n};\n\n// All Students\n// THUNK CREATOR:\nexport const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\n  try {\n    // API \"get\" call to get \"students\" data from database\n    let res = await axios.get(`/api/students`);  \n    // Call Action Creator to return Action object (type + payload with \"students\" data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.fetchAllStudents(res.data));  \n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Add Student\n// THUNK CREATOR:\nexport const addStudentThunk = (student) => async (dispatch) => {  // The THUNK\n  try {\n    // API \"post\" call to add \"student\" object's data to database\n    let res = await axios.post(`/api/students`, student);  \n    // Call Action Creator to return Action object (type + payload with new students data)\n    // Then dispatch the Action object to Reducer to update state \n    dispatch(ac.addStudent(res.data));\n    return res.data;\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Delete Student\n// THUNK CREATOR:\nexport const deleteStudentThunk = studentId => async dispatch => {  // The THUNK\n  try {\n    // API \"delete\" call to delete student (based on \"studentID\") from database\n    await axios.delete(`/api/students/${studentId}`);  \n    // Delete successful so change state with dispatch\n    dispatch(ac.deleteStudent(studentId));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Edit Student\n// THUNK CREATOR:\nexport const editStudentThunk = student => async dispatch => {  // The THUNK\n  try {\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); \n    // Update successful so change state with dispatch\n    dispatch(ac.editStudent(updatedStudent));\n  } catch(err) {\n    console.error(err);\n  }\n};\n\n// Single Student\n// THUNK CREATOR:\nexport const fetchStudentThunk = id => async dispatch => {  // The THUNK\n  try {\n    // API \"get\" call to get a specific student (based on \"id\") data from database\n    let res = await axios.get(`/api/students/${id}`);  \n    // Call Action Creator to return Action object (type + payload with student data)\n    // Then dispatch the Action object to Reducer to display student data \n    dispatch(ac.fetchStudent(res.data));\n  } catch(err) {\n    console.error(err);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}