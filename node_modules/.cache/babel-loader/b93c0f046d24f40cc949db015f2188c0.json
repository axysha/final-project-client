{"ast":null,"code":"var _jsxFileName = \"/Users/ivysun/Library/Mobile Documents/com~apple~CloudDocs/Hunter/Spring 2025/CS 39548 Practical Web Development /Projects/final-project-client/src/components/containers/EditCampusContainer.js\";\n/*==================================================\nEditCampusContainer.js\n================================================== */\n\n// import React, { useState, useEffect } from 'react';\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\n// import EditCampusView from '../views/EditCampusView';\n\n// const EditCampusContainer = (props) => {\n//     const { id } = props.match.params;\n\n//     // State to store campus data and loading status\n//     const [campus, setCampus] = useState({\n//         name: '',\n//         address: '',\n//         description: '',\n//         imageUrl: '',\n//     });\n\n//     useEffect(() => {\n//         const loadCampus = async () => {\n//             try {\n//                 const campusData = await props.fetchCampus(id);\n//                 setCampus(campusData);\n//             } catch (error) {\n//                 console.error('Error fetching campus:', error);\n//             }\n//         };\n//         loadCampus();\n//     }, [id]);\n\n//     const handleChange = (e) => {\n//         const { name, value } = e.target;\n//         setCampus({ ...campus, [name]: value });\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         try {\n//             await props.editCampus(campus);\n//             alert('Campus updated successfully!');\n//             props.history.push(`/campus/${id}`);\n//         } catch (error) {\n//             console.error('Error updating campus:', error);\n//         }\n//     };\n\n//     return (\n//         <EditCampusView \n//             campus={campus}\n//             handleChange={handleChange}\n//             handleSubmit={handleSubmit}\n//         />\n//     );\n// };\n\n// const mapDispatch = (dispatch) => ({\n//     fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n//     editCampus: (campus) => dispatch(editCampusThunk(campus)),\n// });\n\n// export default connect(null, mapDispatch)(EditCampusContainer);\n\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport EditCampusView from '../views/EditCampusView';\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\n//import { editCampus, fetchCampus } from '../../store/actions/actionCreators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass EditCampusContainer extends Component {\n  //intialize state\n  constructor(props) {\n    super(props);\n    // componentDidUpdate(prevProps){\n    //     if(prevProps.campus!== this.props.campus){\n    //         const { name, address, description, imageUrl } = this.props.campus;\n    //         this.setState({ name, address, description,imageUrl });\n    //     }\n    // }\n    //capture input data when it's entered\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    //take action after user clicks the submit button\n    this.handleSubmit = async (event, formData) => {\n      event.preventDefault();\n      let campus = {\n        id: this.props.campus.id,\n        // name: this.state.name,\n        // address: this.state.address,\n        // description: this.state.description,\n        // imageUrl:this.state.imageUrl,\n        name: formData.name,\n        address: formData.address,\n        description: formData.description,\n        imageUrl: formData.imageUrl\n      };\n\n      //update campus in backend database\n      await this.props.editCampus(campus.id, campus);\n\n      //update state and trigger redirect to the updated campus page\n      this.setState({\n        redirect: true,\n        redirectId: campus.id\n      });\n    };\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: \"\",\n      imageUrl: \"\",\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  //fetch the campus when the component mounts\n  async componentDidMount() {\n    await this.props.fetchCampus(this.props.match.params.id);\n    console.log(\"Fetched Campus:\", this.props.campus); // Log the campus data\n\n    //update the state with the fetched campus data\n    const {\n      name,\n      address,\n      description,\n      imageUrl\n    } = this.props.campus;\n    this.setState({\n      name,\n      address,\n      description,\n      imageUrl\n    });\n  }\n  //unmount handler to clear redirect state\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  //render edit campus input form\n  render() {\n    //redire to the updated campus page after submission\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 20\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EditCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        campusName: this.state.name,\n        campusAddress: this.state.address,\n        campusDescription: this.state.description,\n        campusImageUrl: this.state.imageUrl,\n        campus: this.props.campus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n//map state from redux to component props\nconst mapState = state => {\n  return {\n    campus: state.campus\n  };\n};\n\n//map dispatch to props\nconst mapDispatch = dispatch => {\n  return {\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    editCampus: (id, campus) => dispatch(editCampusThunk(id, campus))\n  };\n};\n\n//export the connected component\nexport default connect(mapState, mapDispatch)(EditCampusContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","EditCampusView","fetchCampusThunk","editCampusThunk","jsxDEV","_jsxDEV","EditCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","formData","preventDefault","campus","id","address","description","imageUrl","editCampus","redirect","redirectId","state","componentDidMount","fetchCampus","match","params","console","log","componentWillUnmount","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","campusName","campusAddress","campusDescription","campusImageUrl","mapState","mapDispatch","dispatch"],"sources":["/Users/ivysun/Library/Mobile Documents/com~apple~CloudDocs/Hunter/Spring 2025/CS 39548 Practical Web Development /Projects/final-project-client/src/components/containers/EditCampusContainer.js"],"sourcesContent":["/*==================================================\nEditCampusContainer.js\n================================================== */\n\n// import React, { useState, useEffect } from 'react';\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\n// import EditCampusView from '../views/EditCampusView';\n\n// const EditCampusContainer = (props) => {\n//     const { id } = props.match.params;\n\n//     // State to store campus data and loading status\n//     const [campus, setCampus] = useState({\n//         name: '',\n//         address: '',\n//         description: '',\n//         imageUrl: '',\n//     });\n\n//     useEffect(() => {\n//         const loadCampus = async () => {\n//             try {\n//                 const campusData = await props.fetchCampus(id);\n//                 setCampus(campusData);\n//             } catch (error) {\n//                 console.error('Error fetching campus:', error);\n//             }\n//         };\n//         loadCampus();\n//     }, [id]);\n\n//     const handleChange = (e) => {\n//         const { name, value } = e.target;\n//         setCampus({ ...campus, [name]: value });\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         try {\n//             await props.editCampus(campus);\n//             alert('Campus updated successfully!');\n//             props.history.push(`/campus/${id}`);\n//         } catch (error) {\n//             console.error('Error updating campus:', error);\n//         }\n//     };\n\n//     return (\n//         <EditCampusView \n//             campus={campus}\n//             handleChange={handleChange}\n//             handleSubmit={handleSubmit}\n//         />\n//     );\n// };\n\n// const mapDispatch = (dispatch) => ({\n//     fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n//     editCampus: (campus) => dispatch(editCampusThunk(campus)),\n// });\n\n// export default connect(null, mapDispatch)(EditCampusContainer);\n\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport EditCampusView from '../views/EditCampusView';\nimport { fetchCampusThunk, editCampusThunk } from '../../store/thunks';\n//import { editCampus, fetchCampus } from '../../store/actions/actionCreators';\n\nclass EditCampusContainer extends Component {\n    //intialize state\n    constructor(props){\n        super(props);\n        this.state = {\n            name: \"\",\n            address: \"\",\n            description:\"\",\n            imageUrl: \"\",\n            redirect: false,\n            redirectId: null\n        };\n    }\n\n    //fetch the campus when the component mounts\n    async componentDidMount(){\n        await this.props.fetchCampus(this.props.match.params.id);\n        console.log(\"Fetched Campus:\", this.props.campus);  // Log the campus data\n        \n        //update the state with the fetched campus data\n        const {name,address,description,imageUrl} = this.props.campus;\n        this.setState({name,address,description,imageUrl});\n    }\n\n    // componentDidUpdate(prevProps){\n    //     if(prevProps.campus!== this.props.campus){\n    //         const { name, address, description, imageUrl } = this.props.campus;\n    //         this.setState({ name, address, description,imageUrl });\n    //     }\n    // }\n\n    //capture input data when it's entered\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value,\n        });\n    };\n\n    //take action after user clicks the submit button\n    handleSubmit = async (event,formData) => {\n        event.preventDefault();\n\n        let campus = {\n            id:this.props.campus.id,\n            // name: this.state.name,\n            // address: this.state.address,\n            // description: this.state.description,\n            // imageUrl:this.state.imageUrl,\n            name: formData.name,\n            address:formData.address,\n            description:formData.description,\n            imageUrl:formData.imageUrl,\n        };\n\n        //update campus in backend database\n        await this.props.editCampus(campus.id,campus);\n\n        //update state and trigger redirect to the updated campus page\n        this.setState({\n            redirect:true,\n            redirectId:campus.id,\n        });\n    };\n\n    //unmount handler to clear redirect state\n    componentWillUnmount(){\n        this.setState({ redirect:false, redirectId:null});\n    }\n\n    //render edit campus input form\n    render(){\n        //redire to the updated campus page after submission\n        if(this.state.redirect){\n            return <Redirect to={`/campus/${this.state.redirectId}`} />;\n        }\n        return (\n            <div>\n                <Header />\n                <EditCampusView\n                    handleChange = {this.handleChange}\n                    handleSubmit={this.handleSubmit}\n                    campusName = {this.state.name}\n                    campusAddress = {this.state.address}\n                    campusDescription = {this.state.description}\n                    campusImageUrl= {this.state.imageUrl}\n                    campus={this.props.campus}\n                />\n            </div>\n        );\n    }\n}\n\n//map state from redux to component props\nconst mapState = (state) => {\n    return {\n        campus: state.campus,\n    };\n};\n\n//map dispatch to props\nconst mapDispatch = (dispatch) => {\n    return {\n        fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n        editCampus: (id,campus) => dispatch(editCampusThunk(id,campus)),\n    };\n};\n\n//export the connected component\nexport default connect(mapState,mapDispatch)(EditCampusContainer);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}